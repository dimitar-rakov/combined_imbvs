<launch>
        <!-- LAUNCH INTERFACE -->

        <!-- in case you have different robot configurations -->
        <!-- choose robot simulation -->
        <arg name="robot_name" default="brick_pick_and_place_environment"/>

        <!-- the default is the simulator -->
        <arg name="use_lwr_sim" default="false"/>

        <!-- set the parameters for the real interface -->
        <arg name="lwr_powered" default="true"/>
        <arg name="port" default="49939"/>
        <arg name="ip" default="192.168.0.40"/>
        <arg name="file" default="$(find ics_lwr_setup)/config/980067-FRI-Driver.init"/>
        <arg name="t1_limits" default="false"/>
        <arg name="controllers" default="joint_trajectory_controller" />
        <arg name="stopped_controllers" default="gravity_compensation_controller one_task_inverse_kinematics adaptive_torque_controller"/>

        <!-- set some ros tools -->
        <arg name="use_rviz" default="false"/>
        <arg name="use_gui" default="false" />

        <!-- rviz -->
        <group if="$(arg use_rviz)">
                <node name="lwr_rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find ics_lwr_launch)/launch/rviz_config.rviz" output="screen"/>
        </group>

	
	<!-- STATIC PUBLISHER -->
	<node name="workspace_base_lwr_base" pkg="tf2_ros"
			type="static_transform_publisher"
			args="-0.55 0.0 0.345 0.0 -1.57079 -3.14159 workspace_base lwr_base_link_test" />

	<node name="flange_lego_gripper" pkg="tf2_ros"
			type="static_transform_publisher"
			args="-0.01 0.014 0.204 0.0 0.0 -3.16497 lwr_a6_link lego_gripper" />

        <!-- LAUNCH IMPLEMENTATION -->

        <!-- the urdf/sdf parameter -->
        <param name="robot_description" command="$(find xacro)/xacro.py $(find ics_lwr_setup)/enviroment/$(arg robot_name).urdf.xacro"/>

        <!-- load initial position for the robot -->
        <rosparam file="$(find ics_lwr_setup)/config/load_start_position.yaml" command="load"/>

        <!-- joint and robot state publishers of the full robot description -->
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
                <rosparam param="source_list">[/lwr/joint_states]</rosparam>
        </node>

        <!-- robot states -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

        <!-- robot simulation uses the full robot description -->
        <group if="$(arg use_lwr_sim)">
                <!-- spawn the robot in gazebo -->
                <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name)" respawn="false" output="screen" />

                <!-- enable/disable gui at will, the rviz listens to the simulation -->
                <include file="$(find gazebo_ros)/launch/empty_world.launch">
                        <arg name="world_name" value="$(find ics_lwr_setup)/worlds/simple_environment.world"/>
                        <arg name="paused" value="false"/>
                        <arg name="use_sim_time" value="true"/>
                        <arg name="gui" value="false"/>
                        <arg name="headless" value="false"/>
                        <arg name="debug" value="false"/>
                </include>
        </group>

        <!-- Load updated joint limits (override information from moveit) to respect T1 mode limits -->
        <group if="$(arg t1_limits)" ns="robot_description_planning">
                <rosparam command="load" file="$(find ics_lwr_setup)/config/t1_joint_limits.yaml"/>
        </group>

        <!-- load robotHW configurations to rosparam server -->
        <rosparam command="load" file="$(find ics_lwr_setup)/config/hw_interface.yaml"/>

        <!-- load all controller configurations to rosparam server -->
        <rosparam file="$(find ics_lwr_setup)/config/controllers.yaml" command="load"/>

        <!-- real robot and controllers -->
        <group ns="lwr">
                <group if="$(arg lwr_powered)">
                        <!--add a copy of the robot description within the name space -->
                        <param name="robot_description" command="$(find xacro)/xacro.py $(find ics_lwr_setup)/enviroment/$(arg robot_name).urdf.xacro"/>
                        <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                                <arg name="port" value="$(arg port)"/>
                                <arg name="ip" value="$(arg ip)"/>
                                <arg name="file_with_path" value="$(arg file)"/>
                                <!-- this name MUST match the name you give to the arm in the URDF instance -->
                                <!-- to minimize errors, you could pass it as a xacro parameter -->
                                <arg name="name" value="lwr"/>
                        </include>
                </group>

                <!-- spawn only desired controllers in current namespace -->
                <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller $(arg controllers)"/>
                <node name="controller_stopper" pkg="controller_manager" type="spawner" args="--stopped $(arg stopped_controllers)" />
        </group>
</launch>
